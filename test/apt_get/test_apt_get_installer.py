import os
import pathlib
from typing import List
import pytest
from helpers import RESOURCE_DIR
from dcontainer.apt_get.apt_get_installer import AptGetInstaller
from dcontainer.devcontainer.models.devcontainer_feature_definition import FeatureDefinition
from dcontainer.devcontainer.feature_generation.oci_feature_generator import OCIFeatureGenerator
from dcontainer.devcontainer.feature_generation.file_models.dependencies_sh import DependenciesSH

EMPTY_FEATURE = os.path.join(RESOURCE_DIR, "test_installations", "empty-feature", "feature-definition.json")



TEST_IMAGE = "mcr.microsoft.com/devcontainers/base:debian"


@pytest.mark.parametrize(
    "packages,ppas,release_version",
    [
        (["wget"], [], "v0.3.0rc1")
    ],
)
def test_apt_get_install(
    shell, tmp_path: pathlib.Path, packages: List[str], ppas: List[str], release_version:str
) -> None:

    feature_definition_obj = FeatureDefinition.parse_file(EMPTY_FEATURE)
    packages_cmd = " ".join(["--package {package}" for package in packages])
    ppas_cmd = " ".join(["--ppa {ppa}" for ppa in ppas])
    
    header = DependenciesSH._generate_dcontainer_setup_bash_script(release_version=release_version)

    feature_definition_obj.install_command = f"{header}\n$dcontainer_location install apt-get {packages_cmd} {ppas_cmd}"
    feature_definition_obj.test_scenarios[0].test_commands[0] = "type wget"

    feature_definition_obj_path = tmp_path.joinpath("feature-definition.json")

    with open(feature_definition_obj_path, "w") as f:
        f.write(feature_definition_obj.json(indent=4))

        

    tmp_path_str = tmp_path.joinpath("generated_feature").as_posix()
    OCIFeatureGenerator.generate(
        feature_definition=feature_definition_obj_path,
        output_dir=tmp_path_str,
        release_version=release_version
    )
    print( f"devcontainer features test -p {tmp_path_str} -f {feature_definition_obj.id} --skip-autogenerated")
    response = shell.run(
        f"devcontainer features test -p {tmp_path_str} -f {feature_definition_obj.id} --skip-autogenerated",
        shell=True,
    )
    print(response.stdout)
    print(response.stderr)

    assert response.exitcode == 0

import pathlib
from typing import List
import pytest
from dcontainer.devcontainer.models.devcontainer_feature_definition import FeatureDefinition, TestScenario
from dcontainer.devcontainer.feature_generation.oci_feature_generator import OCIFeatureGenerator
from dcontainer.devcontainer.feature_generation.file_models.dependencies_sh import DependenciesSH
import tempfile
from pathlib import Path
import invoke
import sys


def generate_testing_devcontainer_feature(release_version: str, command: str,  test_command: str, image:str) -> bool:
    feature_definition = FeatureDefinition(id="test", version="0.0.0")
    feature_definition.install_command = DependenciesSH._generate_dcontainer_setup_bash_script(release_version=release_version) + "\n" + command 
    feature_definition.test_scenarios = [TestScenario(
        name="test_",
        test_commands=[test_command],
        image=image,
        options={}
    )]

    with tempfile.TemporaryDirectory() as tempdir:
        feature_definition_obj_path = Path(tempdir, "feature-definition.json")
        with open(feature_definition_obj_path, "w") as f:
            f.write(feature_definition.json(indent=4))

        tmp_path_str = Path(tempdir,"generated_feature").as_posix()

        OCIFeatureGenerator.generate(
            feature_definition=feature_definition_obj_path,
            output_dir=tmp_path_str,
            release_version=release_version
    )
        
        
        print( f"devcontainer features test -p {tmp_path_str} -f {feature_definition.id} --skip-autogenerated")
        response = invoke.run(
            f"BUILDKIT_PROGRESS=plain devcontainer features test -p {tmp_path_str} -f {feature_definition.id} --skip-autogenerated",
            out_stream=sys.stdout, err_stream=sys.stderr, pty=True
        )
    
        return response.return_code == 0
        


@pytest.mark.parametrize(
    "packages,ppas,test_command,release_version,image",
    [
        (["neovim"], ["ppa:neovim-ppa/stable"],"nvim --version", "v0.3.0rc5", "mcr.microsoft.com/devcontainers/base:ubuntu")
    ],
)
def test_apt_get_install(
    packages: List[str], ppas: List[str], test_command, release_version:str, image:str
) -> None:

    packages_cmd = " ".join([f"{package} " for package in packages])
    ppas_cmd = " ".join([f"--ppa {ppa}" for ppa in ppas])
    
    install_command = f"$dcontainer_location install apt-get {packages_cmd} {ppas_cmd}"
    
    assert generate_testing_devcontainer_feature(release_version=release_version,command=install_command, test_command= test_command, image=image)

name: release-publish-x86_64
on: 
  workflow_dispatch:
  workflow_call:
  
jobs:
  start-runner:
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          ec2-image-id: ami-0be0b429754f45749
          ec2-instance-type: c6i.large
          subnet-id: subnet-0106a8fd730d9d51a
          security-group-id: sg-0603c015125d85171

  do-the-job:
    name: Do the job on the runner
    needs: start-runner # required to start the main job when the runner is ready
    runs-on: ${{ needs.start-runner.outputs.label }} # run the job on the newly created runner

    env:
      binary_name: dcontainer
      target_triple: "x86_64-unknown-linux-gnu"
    steps:
      - uses: actions/checkout@v3
  
      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
            toolchain: stable
            override: true
  
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
  
      - name: Build Python Package
        run: |
          python -m pip install --upgrade pip 
          python -m pip install --upgrade build setuptools wheel  setuptools-scm
          python -m build --wheel
  
      - name: Build Binary using Pyoxidizer
        id: run_pyoxidizer
  
        run: |
          python -m pip install --upgrade pip 
          python -m pip install pyoxidizer
  
          oxidizer_location=$GITHUB_WORKSPACE
          wheel_location=./dist/$(ls dist | grep .whl)
          target_triple=$target_triple
          run_command="from dcontainer.__main__ import main; main()"
          python_version="3.10"
  
          pyoxidizer build exe \
            --path $oxidizer_location \
            --release \
            --var wheel_location $wheel_location \
            --var run_command "$run_command" \
            --var python_version $python_version \
            --var app_name $binary_name \
            --target-triple $target_triple 
  
          pyoxidizer analyze "$oxidizer_location/build/$target_triple/release/exe/$binary_name"
          
          strip $oxidizer_location/build/$target_triple/release/exe/$binary_name
          
          tar -zcvf $GITHUB_WORKSPACE/build/$binary_name-$target_triple.tgz "$oxidizer_location/build/$target_triple/release/exe/$binary_name"
  
          echo "binary_location=$GITHUB_WORKSPACE/build/$binary_name-$target_triple.tgz" >> "$GITHUB_OUTPUT"
  
      - name: Create GH Release
        uses: softprops/action-gh-release@v0.1.15
        with:
            files: |
              ${{ steps.run_pyoxidizer.outputs.binary_location }}
  
  stop-runner:
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - do-the-job # required to wait when the main job is done
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.GH_PERSONAL_ACCESS_TOKEN }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}